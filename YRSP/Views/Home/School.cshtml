@Scripts.Render("~/Bundles/schools")
@{
    ViewBag.Title = "School";
}
<!--background image-->
<div class="container-fluid" style="        height: 200px;
        background-image: url('../../Images/school5.jpg');
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;" >
</div>
<!--school filters-->
<div class="container" style="font-size: 1.2em;">
    <h3>Select the best school that fits you<br />Or click on the map to 
    rank schools by distance to your location.</h3>
    <div class="row text-center" style="margin-top: 10px; margin-bottom: 10px;">
        <div class="col-xs-3">
            <label for="type">School Type:</label>
            <select id="type-top">
                <option value="All">All</option>
            </select>
        </div>
        <div class="col-xs-3">
            <label for="sector">Education Sector:</label>
            <select id="sector-top">
                <option value="All">All</option>
            </select>
        </div>
        <div class="col-xs-3">
            <label for="resp">Refugee Suport Project:</label>
            <select id="resp-top">
                <option value="Yes">Yes</option>
                <option value="No">No</option>
            </select>
        </div>
        <div class="col-xs-3"><button class="choosebutton" onclick="getSchoolsTop()">Choose For Me</button></div>   
    </div>
</div>
<div style="position: relative;">
    <div id='map' style='width: 100%; height: 400px;'></div>
    <ul id="list" class="list-group" style="width:30vw; max-height: 400px; overflow-y: auto; background: white; position:absolute; top: 0; left: 0;"></ul>
</div>
<div id="result"></div>
@*<script src="/Static/vic_school_locations_2019_resp_merged_v1.js"></script>*@
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.1/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.1/mapbox-gl-geocoder.css' type='text/css' />
<script>
    var userPopUp = new mapboxgl.Popup({ offset: 25 });
    let types = new Set(schools.map(i => i.School_Type));
    let sectors = new Set(schools.map(i => i.Education_Sector));
    for (let type of types) {
        $('#type-top').append(new Option(type, type));
    }
    for (let sector of sectors) {
        $('#sector-top').append(new Option(sector, sector));
    }

    mapboxgl.accessToken = 'pk.eyJ1IjoicHExMjM0IiwiYSI6ImNqbmJsazA0MjBhazYzcWtnb3cxNmtodm0ifQ.GcpMAuvOieKuI2pjO3bBjg';
    let map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        zoom: 10,
        center: [144.96332, -37.814], // Victoria, Australia
    });

    map.addControl(new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl
    }));

    map.addControl(new mapboxgl.GeolocateControl({
        positionOptions: {
            enableHighAccuracy: true
        },
        trackUserLocation: true
    }));

    var userMarker = new mapboxgl.Marker();

    map.on('click', (e) => {
        userPopUp.setLngLat(e.lngLat).addTo(map);
        userPopUp.setHTML(`<label for="type">School Type:</label>
<select id="type">
    <option value="All">All</option>
</select>
<label for="sector">Education Sector:</label>
<select id="sector">
    <option value="All">All</option>
</select>
<label for="resp">Refugee Suport Project:</label>
<select id="resp">
    <option value="Yes">Yes</option>
    <option value="No">No</option>
</select><br/>
<button class="choosebutton" onclick="getSchools()">Choose For Me</button>
`);
        for (let type of types) {
            $('#type').append(new Option(type, type));
        }
        for (let sector of sectors) {
            $('#sector').append(new Option(sector, sector));
        }
    });

    let markers;
    let list = $('#list');
    function getSchools() {
        let filteredSchools = [];
        if (markers && markers.length > 0) {
            for (marker of markers) {
                marker.remove();
            }
        }
        markers = [];
        list.html('');

        let type = $('#type option:selected').val();
        let sector = $('#sector option:selected').val();
        let resp = $('#resp option:selected').val();
        for (let school of schools) {
            if ((sector === 'All' || school.Education_Sector === sector) && (type === 'All' || school.School_Type === type) && school.RESP_Part === resp) {
                let distance = getDistance(userPopUp._lngLat.lat, userPopUp._lngLat.lng, school.Y, school.X);
                school.distance = (distance / 1000).toFixed(2);
                filteredSchools.push(school);
            }
        }

        filteredSchools.sort((a, b) => (Number(a.distance) > Number(b.distance) ? 1 : -1));

        for (let school of filteredSchools) {
            let marker = new mapboxgl.Marker();
            let popup = new mapboxgl.Popup({ offset: 25 })
                .setHTML(`<h4>${school.School_Name}</h4>
                    <p>Education Sector: ${school.Education_Sector}
                    <br>School Type: ${school.School_Type}
                    <br>Address: ${school.Address_Line_1 ? school.Address_Line_1 + ', ' : ''}
                    ${school.Address_Line_2 ? school.Address_Line_2 + ', ' : ''}
                    ${school.Address_Town ? school.Address_Town + ', ' : ''}
                    ${school.Address_State ? school.Address_State + ', ' : ''}
                    ${school.Address_Postcode ? school.Address_Postcode + ', ' : ''}
                    </p>`);
            marker.setLngLat([school.X, school.Y])
                .setPopup(popup)
                .addTo(map);
            markers.push(marker);

            list.append(`<li class="list-group-item""><a class="school_link" href="#" onclick="center(${school.X}, ${school.Y})">${school.School_Name} ${school.distance}km</a></li>`);
        }
    }

    function getSchoolsTop() {
        let filteredSchools = [];
        if (markers && markers.length > 0) {
            for (marker of markers) {
                marker.remove();
            }
        }
        markers = [];
        list.html('');

        let type = $('#type-top option:selected').val();
        let sector = $('#sector-top option:selected').val();
        let resp = $('#resp-top option:selected').val();
        for (let school of schools) {
            if ((sector === 'All' || school.Education_Sector === sector) && (type === 'All' || school.School_Type === type) && school.RESP_Part === resp) {
                filteredSchools.push(school);
            }
        }
        for (let school of filteredSchools) {
            let marker = new mapboxgl.Marker();
            let popup = new mapboxgl.Popup({ offset: 25 })
                .setHTML(`<h4>${school.School_Name}</h4>
                    <p>Education Sector: ${school.Education_Sector}
                    <br>School Type: ${school.School_Type}
                    <br>Address: ${school.Address_Line_1 ? school.Address_Line_1 + ', ' : ''}
                    ${school.Address_Line_2 ? school.Address_Line_2 + ', ' : ''}
                    ${school.Address_Town ? school.Address_Town + ', ' : ''}
                    ${school.Address_State ? school.Address_State + ', ' : ''}
                    ${school.Address_Postcode ? school.Address_Postcode + ', ' : ''}
                    </p>`);
            marker.setLngLat([school.X, school.Y])
                .setPopup(popup)
                .addTo(map);
            markers.push(marker);

            list.append(`<li class="list-group-item""><a class="school_link" href="#" onclick="center(${school.X}, ${school.Y})">${school.School_Name}</a></li>`);
        }
    }

    function center(lng, lat) {
        map.flyTo({
            center: [lng, lat],
            zoom: 16,
        });
    }

    // get distance in meters
    function getDistance(lat1, lng1, lat2, lng2) {
        var dis = 0;
        var radLat1 = toRadians(lat1);
        var radLat2 = toRadians(lat2);
        var deltaLat = radLat1 - radLat2;
        var deltaLng = toRadians(lng1) - toRadians(lng2);
        var dis = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(deltaLng / 2), 2)));
        return dis * 6378137;

        function toRadians(d) { return (d * Math.PI / 180); }
    }

</script>